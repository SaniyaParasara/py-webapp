# events {
#     worker_connections 1024;
# }

# http {
#     upstream restaurant_backend {
#         server restaurant-website:80;
#     }

#     # Rate limiting
#     limit_req_zone $binary_remote_addr zone=restaurant:10m rate=10r/s;

#     # Gzip compression
#     gzip on;
#     gzip_vary on;
#     gzip_min_length 1024;
#     gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

#     server {
#         listen 80;
#         server_name localhost;

#         # Redirect HTTP to HTTPS (uncomment for production with SSL)
#         # return 301 https://$server_name$request_uri;

#         location / {
#             limit_req zone=restaurant burst=20 nodelay;
            
#             proxy_pass http://restaurant_backend;
#             proxy_set_header Host $host;
#             proxy_set_header X-Real-IP $remote_addr;
#             proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#             proxy_set_header X-Forwarded-Proto $scheme;
            
#             # Timeouts
#             proxy_connect_timeout 30s;
#             proxy_send_timeout 30s;
#             proxy_read_timeout 30s;
#         }

#         # Health check endpoint
#         location /health {
#             access_log off;
#             return 200 "healthy\n";
#             add_header Content-Type text/plain;
#         }
#     }

#     # HTTPS server (uncomment and configure for production)
#     # server {
#     #     listen 443 ssl http2;
#     #     server_name localhost;
#     #
#     #     ssl_certificate /etc/nginx/ssl/cert.pem;
#     #     ssl_certificate_key /etc/nginx/ssl/key.pem;
#     #     ssl_protocols TLSv1.2 TLSv1.3;
#     #     ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;
#     #     ssl_prefer_server_ciphers off;
#     #
#     #     location / {
#     #         proxy_pass http://restaurant_backend;
#     #         proxy_set_header Host $host;
#     #         proxy_set_header X-Real-IP $remote_addr;
#     #         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#     #         proxy_set_header X-Forwarded-Proto $scheme;
#     #     }
#     # }
# }

# nginx-proxy.conf
events {
    worker_connections 1024;
}

http {
    upstream restaurant_backend {
        server restaurant-website:80;
    }

    # Rate limiting
    limit_req_zone $binary_remote_addr zone=restaurant:10m rate=10r/s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

    server {
        listen 80;
        server_name localhost;

        # Security headers (optional)
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;

        # Redirect HTTP to HTTPS (uncomment for production with SSL)
        # return 301 https://$server_name$request_uri;

        location / {
            limit_req zone=restaurant burst=20 nodelay;
            proxy_pass http://restaurant_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Health check endpoint served by proxy
        location /health {
            access_log off;
            default_type text/plain;
            return 200 "healthy\n";
        }

        # Serve static assets caching rules (for safety)
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }

    # HTTPS (example) - configure with real certs in production
    # server {
    #     listen 443 ssl http2;
    #     server_name localhost;
    #     ssl_certificate /etc/nginx/ssl/cert.pem;
    #     ssl_certificate_key /etc/nginx/ssl/key.pem;
    #     ...
    # }
}
